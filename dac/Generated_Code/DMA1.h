/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : DMA1.h
**     Project     : ProcessorExpert
**     Processor   : MK60FN1M0VLQ15
**     Component   : DMA_LDD
**     Version     : Component 01.065, Driver 01.07, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-08-19, 13:17, # CodeGen: 45
**     Abstract    :
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
**     Settings    :
**          Component name                                 : DMA1
**          Device                                         : DMA
**          Settings                                       : 
**            Minor loop mapping                           : Disabled
**            Continuous mode                              : Disabled
**            Halt on error                                : Disabled
**            Debug                                        : Enabled
**          Channel arbitration type                       : Round robin
**          DMA channels                                   : 1
**            Settings of DMA channel                      : DMA_Channel0
**              Channel                                    : DMA_Channel0
**              Channel arbitration type                   : Round robin
**              Interrupt service                          : Enabled
**                Transfer complete interrupt              : INT_DMA0_DMA16
**                Transfer complete interrupt priority     : medium priority
**                Error interrupt                          : INT_DMA_Error
**                Error interrupt priority                 : medium priority
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                         - LDD_TDeviceData* DMA1_Init(LDD_TUserData *UserDataPtr);
**         Enable                       - LDD_TError DMA1_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable                      - LDD_TError DMA1_Disable(LDD_TDeviceData *DeviceDataPtr);
**         AllocateChannel              - LDD_TError DMA1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr,...
**         EnableChannel                - LDD_TError DMA1_EnableChannel(LDD_TDeviceData *DeviceDataPtr,...
**         StartChannelTransfer         - LDD_TError DMA1_StartChannelTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         CancelChannelTransfer        - LDD_TError DMA1_CancelChannelTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelSourceAddress      - LDD_TError DMA1_SetChannelSourceAddress(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelDestinationAddress - LDD_TError DMA1_SetChannelDestinationAddress(LDD_TDeviceData *DeviceDataPtr,...
**         SetChannelByteCount          - LDD_TError DMA1_SetChannelByteCount(LDD_TDeviceData *DeviceDataPtr,...
**
**Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**http      : www.freescale.com
**mail      : support@freescale.com
** ###################################################################*/
/*!
** @file DMA1.h
** @version 01.07
** @brief
**          This embedded component implements initialization
**          and runtime handling of an on-chip DMA controller.
*/         
/*!
**  @addtogroup DMA1_module DMA1 module documentation
**  @{
*/         

#ifndef __DMA1_H
#define __DMA1_H

/* MODULE DMA1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Cpu.h"
#include "DMA_PDD.h"
#include "DMAMUX_PDD.h"

#include "Cpu.h"


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DMA1_PRPH_BASE_ADDRESS  0x40008000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define DMA1_Init_METHOD_ENABLED       /*!< Init method of the component DMA1 is enabled (generated) */
#define DMA1_Enable_METHOD_ENABLED     /*!< Enable method of the component DMA1 is enabled (generated) */
#define DMA1_Disable_METHOD_ENABLED    /*!< Disable method of the component DMA1 is enabled (generated) */
#define DMA1_AllocateChannel_METHOD_ENABLED /*!< AllocateChannel method of the component DMA1 is enabled (generated) */
#define DMA1_EnableChannel_METHOD_ENABLED /*!< EnableChannel method of the component DMA1 is enabled (generated) */
#define DMA1_StartChannelTransfer_METHOD_ENABLED /*!< StartChannelTransfer method of the component DMA1 is enabled (generated) */
#define DMA1_CancelChannelTransfer_METHOD_ENABLED /*!< CancelChannelTransfer method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelSourceAddress_METHOD_ENABLED /*!< SetChannelSourceAddress method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelDestinationAddress_METHOD_ENABLED /*!< SetChannelDestinationAddress method of the component DMA1 is enabled (generated) */
#define DMA1_SetChannelByteCount_METHOD_ENABLED /*!< SetChannelByteCount method of the component DMA1 is enabled (generated) */

/* Number of DMA channels supported by hardware */
#define DMA1_DMA_CHANNELS_NUMBER 0x20U
/* Number of DMAMUX0 channels supported by hardware */
#define DMA1_DMAMUX0_CHANNELS_NUMBER 0x10U
/* Number of DMAMUX1 channels supported by hardware */
#define DMA1_DMAMUX1_CHANNELS_NUMBER 0x10U
/* Number of configured channels (i.e. all channels set in DMA1 component) */
#define DMA1_CONFIGURED_CHANNELS_NUMBER 0x01U
/* Number of available channels (i.e. all configured channels excluding permanently allocated channels) */
#define DMA1_AVAILABLE_CHANNELS_NUMBER 0x00U
/* Number of DMAMUX0 configured channels (i.e. DMAMUX0 channels set in DMA1 component) */
#define DMA1_CONFIGURED_DMAMUX0_CHANNELS_NUMBER 0x01U
/* Number of DMAMUX0 available channels (i.e. DMAMUX0 configured channels excluding permanently allocated channels) */
#define DMA1_AVAILABLE_DMAMUX0_CHANNELS_NUMBER 0x00U
/* No DMAMUX1 channels configured */
#define DMA1_CONFIGURED_DMAMUX1_CHANNELS_NUMBER 0x00U
/* No DMAMUX1 channels available */
#define DMA1_AVAILABLE_DMAMUX1_CHANNELS_NUMBER 0x00U
/* Number of permanently allocated channels */
#define DMA1_ALLOCATED_CHANNELS_NUMBER 0x01U
/* Number of permanently allocated DMAMUX0 channels */
#define DMA1_ALLOCATED_DMAMUX0_CHANNELS_NUMBER 0x01U
/* Number of permanently allocated DMAMUX1 channels */
#define DMA1_ALLOCATED_DMAMUX1_CHANNELS_NUMBER 0x00U
/* Number of available channels capable of periodic triggering (excluding permanently allocated channels) */
#define DMA1_PERIODIC_TRIGGER_CHANNELS_NUMBER 0x00U
/* Number of available DMAMUX0 channels capable of periodic triggering (excluding permanently allocated channels) */
#define DMA1_PERIODIC_TRIGGER_DMAMUX0_CHANNELS_NUMBER 0x00U
/* Number of available DMAMUX1 channels capable of periodic triggering (excluding permanently allocated channels) */
#define DMA1_PERIODIC_TRIGGER_DMAMUX1_CHANNELS_NUMBER 0x00U
/* No channels without periodic triggering capability available. */
#define DMA1_SIMPLE_CHANNELS_NUMBER 0U
/* No DMAMUX0 channels without periodic triggering capability available. */
#define DMA1_SIMPLE_DMAMUX0_CHANNELS_NUMBER 0U
/* No DMAMUX1 channels without periodic triggering capability available. */
#define DMA1_SIMPLE_DMAMUX1_CHANNELS_NUMBER 0U
/* Channel number constants */
#define DMA1_CHANNEL_0 0x00U
#define DMA1_CHANNEL_1 0x01U
#define DMA1_CHANNEL_2 0x02U
#define DMA1_CHANNEL_3 0x03U
#define DMA1_CHANNEL_4 0x04U
#define DMA1_CHANNEL_5 0x05U
#define DMA1_CHANNEL_6 0x06U
#define DMA1_CHANNEL_7 0x07U
#define DMA1_CHANNEL_8 0x08U
#define DMA1_CHANNEL_9 0x09U
#define DMA1_CHANNEL_10 0x0AU
#define DMA1_CHANNEL_11 0x0BU
#define DMA1_CHANNEL_12 0x0CU
#define DMA1_CHANNEL_13 0x0DU
#define DMA1_CHANNEL_14 0x0EU
#define DMA1_CHANNEL_15 0x0FU
#define DMA1_CHANNEL_16 0x10U
#define DMA1_CHANNEL_17 0x11U
#define DMA1_CHANNEL_18 0x12U
#define DMA1_CHANNEL_19 0x13U
#define DMA1_CHANNEL_20 0x14U
#define DMA1_CHANNEL_21 0x15U
#define DMA1_CHANNEL_22 0x16U
#define DMA1_CHANNEL_23 0x17U
#define DMA1_CHANNEL_24 0x18U
#define DMA1_CHANNEL_25 0x19U
#define DMA1_CHANNEL_26 0x1AU
#define DMA1_CHANNEL_27 0x1BU
#define DMA1_CHANNEL_28 0x1CU
#define DMA1_CHANNEL_29 0x1DU
#define DMA1_CHANNEL_30 0x1EU
#define DMA1_CHANNEL_31 0x1FU
/*  This constant contains mask of all supported events */
#define DMA1_AVAILABLE_EVENTS_MASK (LDD_DMA_ON_COMPLETE | LDD_DMA_ON_ERROR)
/* Maximum number of Nested transfers when channel-to-channel linking after request service is disabled */
#define DMA1_TRANSFER_COUNT_MAX_LINKING_DISABLED 0x7FFFU
/* Maximum number of Nested transfers when channel-to-channel linking after request service is enabled */
#define DMA1_TRANSFER_COUNT_MAX_LINKING_ENABLED 0x01FFU
/* Maximum number of bytes to be transferred in each service request of the channel */
#define DMA1_MAX_BYTE_COUNT 0xFFFFFFFFU
typedef struct {
  LDD_DMA_TChannelNumber ChannelNumber; /* ChannelNumber */
  LDD_DMA_TTransferDescriptor *DescriptorPtr; /* Pointer to the channel's transfer descriptor */
  bool Interrupts;                     /* True, if the DMA channel has enabled interrupts */
  bool Initialized;                    /* True, if the DMA channel has been initialized */
  bool Enabled;                        /* True, if the DMA channel is enabled */
} DMA1_TDescriptorRecord;              /* Transfer descriptor record type. */

typedef DMA1_TDescriptorRecord *DMA1_TDescriptorRecordPtr; /* Pointer to transfer descriptor record. */

typedef struct {
  bool EnUser;                         /* Enable/Disable device */
  DMA1_TDescriptorRecord DescriptorRecord[DMA1_CONFIGURED_CHANNELS_NUMBER]; /* Transfer descriptor records table, one record per one channel. */
  DMA1_TDescriptorRecord *ChannelRecord[DMA1_DMA_CHANNELS_NUMBER]; /* Channel record table for each channel. */
  LDD_TUserData *UserDataPtr;          /* User device data structure */
} DMA1_TDeviceData;                    /* Device data structure */

/* DMA Transfer descriptor structure variables external declarations */
extern DMA1_TDeviceData *DMA1_DeviceDataPtr;


/*
** ===================================================================
**     Method      :  DMA1_Init (component DMA_LDD)
*/
/*!
**     @brief
**         Initializes the device according to design-time
**         configuration properties. Allocates memory for the device
**         data structure. 
**         If the <Enable in init. code> is set to "yes" then the
**         device is also enabled (see the description of the Enable
**         method).
**         This method can be called only once. Before the second call
**         of Init the Deinit method must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* DMA1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_Enable (component DMA_LDD)
*/
/*!
**     @brief
**         Enables DMA device.
**         This method is intended to be used together with Disable
**         method to temporary switch On/Off the device after the
**         device is initialized.
**         This method is required if the <Enable in init. code>
**         property is set to "no" value.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
*/
/* ===================================================================*/
LDD_TError DMA1_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_Disable (component DMA_LDD)
*/
/*!
**     @brief
**         Disables the DMA device. When the device is disabled, some
**         component methods should not be called. If so, error
**         ERR_DISABLED is reported.
**         This method is intended to be used together with Enable
**         method to temporary switch On/Off the device after the
**         device is initialized.
**         This method is not required. The Deinit method can be used
**         to switch off and uninstall the device.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
*/
/* ===================================================================*/
LDD_TError DMA1_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DMA1_AllocateChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method allocates DMA channel for the DMA transfer
**         defined by the transfer descriptor input parameter
**         DescriptorPtr. This method must be called before DMA channel
**         is initialized. Otherwise ERR_NOTAVAIL error code is
**         returned after call of DMA_LDD channel methods.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any possible
**                           channel with desired features to be
**                           allocated.
*/
/* ===================================================================*/
LDD_TError DMA1_AllocateChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_EnableChannel (component DMA_LDD)
*/
/*!
**     @brief
**         The method initializes and/or enables the DMA channel
**         allocated for the DMA transfer defined by the transfer
**         descriptor input parameter DescriptorPtr. First call of this
**         method on given DMA channel initializes it and enables HW
**         requests if Peripheral device or Always enabled trigger
**         source is selected in transfer descriptor Trigger source
**         type item. This method can be also used together with
**         Disable method to temporary switch On/Off the DMA channel HW
**         requests. In such case DMA channel registers are not
**         reinitialized again. New initialization of DMA channel can
**         be done via SetChannelDescriptorUpdate method which
**         reinitializes whole channel with new transfer descriptor.
**         After calling of EnableChannel method channel status is set
**         to LDD_DMA_IDLE.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Transfer descriptor data
**                           are inconsistent.
*/
/* ===================================================================*/
LDD_TError DMA1_EnableChannel(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_StartChannelTransfer (component DMA_LDD)
*/
/*!
**     @brief
**         The method starts DMA transfer on the allocated DMA channel
**         defined by the transfer descriptor input parameter
**         DescriptorPtr. This methods initiates explicit SW transfer
**         request and can be called after channel is initialized by
**         first calling of EnableChannel method. Explicit SW transfer
**         request is serviced regardless of disabling HW requests
**         after calling of the DisableChannel method.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMA1_StartChannelTransfer(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_CancelChannelTransfer (component DMA_LDD)
*/
/*!
**     @brief
**         The method cancels DMA transfer on channel specified by the
**         transfer descriptor input parameter DescriptorPtr. The
**         cancel takes effect after the last write of the current
**         read/write sequence and the channel retires as if the
**         request was serviced normally.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
*/
/* ===================================================================*/
LDD_TError DMA1_CancelChannelTransfer(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelSourceAddress (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets an source address for data to be transferred
**         by the DMA channel allocated for the DMA transfer defined by
**         the transfer descriptor parameter DescriptorPtr. This method
**         can be used to update DMA transfer source address when DMA
**         channel is enabled. New source address is stored in transfer
**         descriptor and written to associated DMA channel registers.
**         The new source address can be optionally checked for
**         consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         Address         - Address of source data for a DMA
**                           channel allocated for a DMA transfer
**                           descriptor defined by the TCD parameter.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source address
**                           is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelSourceAddress(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TAddress Address);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelDestinationAddress (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets an destination address for data to be
**         transferred by the DMA channel allocated for the DMA
**         transfer defined by the transfer descriptor parameter
**         DescriptorPtr. This method can be used to update DMA
**         transfer destination address when DMA channel is enabled.
**         New destination address is stored in transfer descriptor and
**         written to associated DMA channel registers. The new
**         destination address can be optionally checked for
**         consistency with rest of the transfer descriptor data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         Address         - Address of a destination data to
**                           be transferred to by the DMA channel
**                           allocated for a DMA transfer descriptor
**                           defined by the TCD parameter.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected source address
**                           is inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelDestinationAddress(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TAddress Address);

/*
** ===================================================================
**     Method      :  DMA1_SetChannelByteCount (component DMA_LDD)
*/
/*!
**     @brief
**         The method sets a byte count (size of data) to be
**         transferred by the DMA channel allocated for the DMA
**         transfer defined by the transfer descriptor input parameter
**         DescriptorPtr. This method can be used to update DMA
**         transfer byte count when DMA channel is enabled. New
**         transfer byte count is stored in transfer descriptor and
**         written to associated DMA channel registers. The new
**         transfer byte count can be optionally checked for
**         consistency with rest of the transfer descriptor data. If
**         nested operation is used, the method sets the minor (inner)
**         loop byte count.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         DescriptorPtr   - Pointer to a DMA
**                           transfer descriptor structure.
**     @param
**         ByteCount       - Byte count (size of data) to
**                           be transferred by the DMA channel allocated
**                           for a DMA transfer descriptor defined by
**                           the TCD parameter.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_NOTAVAIL - There is not any DMA
**                           channel allocated for the selected transfer
**                           descriptor.
**                           - ERR_PARAM_DATA - Selected byte count is
**                           inconsistent with rest of transfer
**                           descriptor data.
*/
/* ===================================================================*/
LDD_TError DMA1_SetChannelByteCount(LDD_TDeviceData *DeviceDataPtr, LDD_DMA_TTransferDescriptor *DescriptorPtr, LDD_DMA_TByteCount ByteCount);

/*
** ===================================================================
**     Method      :  DMA1_SetClockConfiguration (component DMA_LDD)
**
**     Description :
**         This method changes the clock configuration. During a clock 
**         configuration change the component changes it's setting 
**         immediately upon a request.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void DMA1_SetClockConfiguration(LDD_TDeviceData *DeviceDataPtr, LDD_TClockConfiguration ClockConfiguration);

/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(DMA1_ErrorInterrupt);

/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(DMA1_Channel0Interrupt);


/* END DMA1. */

#endif
/* ifndef __DMA1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
