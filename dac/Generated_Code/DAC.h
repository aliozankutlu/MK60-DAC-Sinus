/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : DAC.h
**     Project     : ProcessorExpert
**     Processor   : MK60FN1M0VLQ15
**     Component   : DAC_LDD
**     Version     : Component 01.081, Driver 01.08, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-08-19, 18:59, # CodeGen: 77
**     Abstract    :
**         This component implements an internal D/A converter of the MCU.
**         It contains settings for converting various format of a values
**         to supported format of the D/A converter.
**
**     Settings    :
**          Component name                                 : DAC
**          D/A converter                                  : DAC0
**          Interrupt service/event                        : Enabled
**            D/A interrupt                                : INT_DAC0
**            D/A interrupt priority                       : medium priority
**          Output pin                                     : yes
**            D/A channel (pin)                            : DAC0_OUT/CMP1_IN3/ADC0_SE23
**            D/A channel (pin) signal                     : 
**          Init value                                     : 0
**          D/A resolution                                 : 12 bits
**          Data mode                                      : unsigned 16 bits, right justified
**          Low power mode                                 : Disabled
**          Voltage reference source                       : external
**          Data buffer                                    : Enabled
**            Hardware trigger                             : Enabled
**              Source component                           : PDB
**            Work mode                                    : Normal
**            Watermark                                    : level 4
**            Buffer size                                  : 4
**              Data register 0                            : 0
**              Data register 1                            : 0
**              Data register 2                            : 0
**              Data register 3                            : 0
**          DMA                                            : Enabled
**            DMA requests                                 : 
**              Buffer start                               : Enabled
**              Buffer watermark                           : Enabled
**              Buffer end                                 : Disabled
**            DMA version                                  : Obsolete
**              DMA Transfer                               : DMATransfer
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnBufferWatermark                          : Disabled
**              OnBufferEnd                                : Disabled
**              OnBufferStart                              : Disabled
**              OnComplete                                 : Enabled
**              OnError                                    : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init                 - LDD_TDeviceData* DAC_Init(LDD_TUserData *UserDataPtr);
**         Enable               - LDD_TError DAC_Enable(LDD_TDeviceData *DeviceDataPtr);
**         Disable              - LDD_TError DAC_Disable(LDD_TDeviceData *DeviceDataPtr);
**         SetBuffer            - LDD_TError DAC_SetBuffer(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         SetBufferMode        - LDD_TError DAC_SetBufferMode(LDD_TDeviceData *DeviceDataPtr,...
**         SetBufferReadPointer - LDD_TError DAC_SetBufferReadPointer(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**         GetBufferReadPointer - byte DAC_GetBufferReadPointer(LDD_TDeviceData *DeviceDataPtr);
**         SetOperationMode     - LDD_TError DAC_SetOperationMode(LDD_TDeviceData *DeviceDataPtr,...
**
**Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**
**http      : www.freescale.com
**mail      : support@freescale.com
** ###################################################################*/
/*!
** @file DAC.h
** @version 01.08
** @brief
**         This component implements an internal D/A converter of the MCU.
**         It contains settings for converting various format of a values
**         to supported format of the D/A converter.
**
*/         
/*!
**  @addtogroup DAC_module DAC module documentation
**  @{
*/         

#ifndef __DAC_H
#define __DAC_H

/* MODULE DAC. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "PDB.h"
#include "Inhr1.h"
#include "Cpu.h"
#include "Events.h"

#include "DAC_PDD.h"

#ifdef __cplusplus
extern "C" {
#endif 

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define DAC_PRPH_BASE_ADDRESS  0x400CC000U
  
/*  This constant contains mask of all events generated by Processor Expert */
#define DAC_AVAILABLE_EVENTS_MASK (LDD_DAC_ON_COMPLETE)
/* This constant contains minimal buffer size available on selected device. */
#define DAC_BUFFER_MIN_SIZE 0x01U
/* This constant contains maximal buffer size available on selected device. */
#define DAC_BUFFER_MAX_SIZE 0x10U

/*
** ===================================================================
**     Method      :  DAC_Init (component DAC_LDD)
*/
/*!
**     @brief
**         Initializes the device according to design-time
**         configuration properties. Allocates memory for the device
**         data structure. 
**         If the [Enable in init. code] is set to "yes" then the
**         device is also enabled (see the description of the Enable
**         method).
**         This method can be called only once. Before the second call
**         of Init the Deinit method must be called first. If DMA
**         service is enabled this method also initializes inherited
**         DMA Transfer component.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an events or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* DAC_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  DAC_Enable (component DAC_LDD)
*/
/*!
**     @brief
**         Enables DAC device. If possible, this method switches on
**         digital-to-analog converter device, voltage reference, etc.
**         This method is intended to be used together with Disable
**         method to temporary switch On/Off the device after the
**         device is initialized.
**         This method is required if the [Enable in init. code]
**         property is set to "no" value.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
*/
/* ===================================================================*/
LDD_TError DAC_Enable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DAC_Disable (component DAC_LDD)
*/
/*!
**     @brief
**         Disables the DAC device. If possible, this method switches
**         off digital-to-analog converter device, voltage reference,
**         etc. When the device is disabled, some component methods
**         should not be called. If so, error ERR_DISABLED is reported.
**         This method is intended to be used together with Enable
**         method to temporary switch On/Off the device after the
**         device is initialized.
**         This method is not required. The Deinit method can be used
**         to switch off and uninstall the device.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
*/
/* ===================================================================*/
LDD_TError DAC_Disable(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DAC_SetBuffer (component DAC_LDD)
*/
/*!
**     @brief
**         Writes an array of data words to the data buffer registers.
**         Array is defined by pointer to start address and by it's
**         length. First written data buffer register is defined by
**         index.
**         If the length of array exceeds number of registers between
**         the first written register and the last one at the end of
**         the buffer then an ERR_PARAM_RANGE is returned and no data
**         are written. It is possible to write all register available
**         in hardware - no checking for current upper limit value of
**         buffer is done.
**         DataArrayPtr has fixed data type regardless of current
**         hardware or design time configuration and must be always
**         used. Real type of user data is specified in [Data mode]
**         property.
**         If the DMA service is enabled then this methods can be used
**         to prepare DMA transfer via channel handled by DMA Transfer
**         inherited component. 
**         _/Note: This method is available only if DAC device is
**         supporting data buffer and Data buffer is enabled./_
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         DataArrayPtr    - Pointer to array
**                           containing user data.
**     @param
**         DataArrayLength - Length of user
**                           data array which should be written to HW
**                           data buffer, immediately by this method, or
**                           by DMA after the request. 
**     @param
**         FirstRegisterIndex - Index of
**                           first written data buffer register.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_PARAM_RANGE - Index of last written
**                           buffer register would be out of buffer
**                           range.
*/
/* ===================================================================*/
LDD_TError DAC_SetBuffer(LDD_TDeviceData *DeviceDataPtr, LDD_TData *DataArrayPtr, LDD_DAC_TArrayLength DataArrayLength, uint8_t FirstRegisterIndex);

/*
** ===================================================================
**     Method      :  DAC_SetBufferMode (component DAC_LDD)
*/
/*!
**     @brief
**         Selects buffer work mode. 
**         _/Note: This method is available only if DAC device is
**         supporting data buffer and Data buffer is enabled./_
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         Mode            - Buffer work mode.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_PARAM_MODE - Invalid mode parameter.
*/
/* ===================================================================*/
LDD_TError DAC_SetBufferMode(LDD_TDeviceData *DeviceDataPtr, LDD_DAC_TBufferMode Mode);

/*
** ===================================================================
**     Method      :  DAC_SetBufferReadPointer (component DAC_LDD)
*/
/*!
**     @brief
**         Sets the data buffer read pointer value. If requested
**         pointer value is greater than buffer size defined by buffer
**         upper limit value then ERR_PARAM_VALUE is returned.
**         _/Note: This method is available only if DAC device is
**         supporting data buffer and Data buffer is enabled./_
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         PointerValue    - New read pointer value.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - Component or device is
**                           disabled.
**                           - ERR_PARAM_VALUE - Invalid value parameter.
*/
/* ===================================================================*/
LDD_TError DAC_SetBufferReadPointer(LDD_TDeviceData *DeviceDataPtr, uint8_t PointerValue);

/*
** ===================================================================
**     Method      :  DAC_GetBufferReadPointer (component DAC_LDD)
*/
/*!
**     @brief
**         Returns the data buffer read pointer value.
**         _/Note: This method is available only if DAC device is
**         supporting data buffer and Data buffer is enabled./_
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Buffer read pointer value.
*/
/* ===================================================================*/
uint8_t DAC_GetBufferReadPointer(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  DAC_SetOperationMode (component DAC_LDD)
*/
/*!
**     @brief
**         This method requests to change the component's operation
**         mode. Upon a request to change the operation mode, the
**         component will finish a pending job first and then notify a
**         caller that an operation mode has been changed. When no job
**         is pending (ERR_OK), the component changes an operation mode
**         immediately and notify a caller about this change. 
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         OperationMode   - Requested driver
**                           operation mode.
**     @param
**         ModeChangeCallback - Callback to
**                           notify the upper layer once a mode has been
**                           changed.
**     @param
**         ModeChangeCallbackParamPtr 
**                           - Pointer to callback parameter to notify
**                           the upper layer once a mode has been
**                           changed.
**     @return
**                         - Error code, possible codes:
**                           - ERR_OK - OK.
**                           - ERR_SPEED - This device does not work in
**                           the active clock configuration.
**                           - ERR_DISABLED - This component is disabled
**                           by user.
**                           - ERR_PARAM_MODE - Invalid operation mode.
*/
/* ===================================================================*/
LDD_TError DAC_SetOperationMode(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr);

/*
** ===================================================================
**     Method      :  DAC_OnComplete (component DAC_LDD)
**
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void Inhr1_OnComplete(LDD_TUserData *UserDataPtr);

/* END DAC. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __DAC_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
