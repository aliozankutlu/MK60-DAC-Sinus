=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "DMA1"      (component DMA_LDD)
   - DMA1_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the description 
                of the Enable method).  This method can be called only once. Before the second call of Init the Deinit method 
                must be called first.
   - DMA1_Enable -Enables DMA device.  This method is intended to be used together with Disable method to temporary switch 
                On/Off the device after the device is initialized.  This method is required if the <Enable in init. code> 
                property is set to "no" value.
   - DMA1_Disable -Disables the DMA device. When the device is disabled, some component methods should not be called. If so, 
                error ERR_DISABLED is reported.  This method is intended to be used together with Enable method to temporary 
                switch On/Off the device after the device is initialized.  This method is not required. The Deinit method can 
                be used to switch off and uninstall the device.
   - DMA1_AllocateChannel -The method allocates DMA channel for the DMA transfer defined by the transfer descriptor input 
                parameter DescriptorPtr. This method must be called before DMA channel is initialized. Otherwise ERR_NOTAVAIL 
                error code is returned after call of DMA_LDD channel methods.
   - DMA1_EnableChannel -The method initializes and/or enables the DMA channel allocated for the DMA transfer defined by the 
                transfer descriptor input parameter DescriptorPtr. First call of this method on given DMA channel initializes 
                it and enables HW requests if Peripheral device or Always enabled trigger source is selected in transfer 
                descriptor Trigger source type item. This method can be also used together with Disable method to temporary 
                switch On/Off the DMA channel HW requests. In such case DMA channel registers are not reinitialized again. New 
                initialization of DMA channel can be done via SetChannelDescriptorUpdate method which reinitializes whole 
                channel with new transfer descriptor. After calling of EnableChannel method channel status is set to 
                LDD_DMA_IDLE.
   - DMA1_StartChannelTransfer -The method starts DMA transfer on the allocated DMA channel defined by the transfer descriptor 
                input parameter DescriptorPtr. This methods initiates explicit SW transfer request and can be called after 
                channel is initialized by first calling of EnableChannel method. Explicit SW transfer request is serviced 
                regardless of disabling HW requests after calling of the DisableChannel method.
   - DMA1_CancelChannelTransfer -The method cancels DMA transfer on channel specified by the transfer descriptor input 
                parameter DescriptorPtr. The cancel takes effect after the last write of the current read/write sequence and 
                the channel retires as if the request was serviced normally.
   - DMA1_SetChannelSourceAddress -The method sets an source address for data to be transferred by the DMA channel allocated 
                for the DMA transfer defined by the transfer descriptor parameter DescriptorPtr. This method can be used to 
                update DMA transfer source address when DMA channel is enabled. New source address is stored in transfer 
                descriptor and written to associated DMA channel registers. The new source address can be optionally checked 
                for consistency with rest of the transfer descriptor data.
   - DMA1_SetChannelDestinationAddress -The method sets an destination address for data to be transferred by the DMA channel 
                allocated for the DMA transfer defined by the transfer descriptor parameter DescriptorPtr. This method can be 
                used to update DMA transfer destination address when DMA channel is enabled. New destination address is stored 
                in transfer descriptor and written to associated DMA channel registers. The new destination address can be 
                optionally checked for consistency with rest of the transfer descriptor data.
   - DMA1_SetChannelByteCount -The method sets a byte count (size of data) to be transferred by the DMA channel allocated for 
                the DMA transfer defined by the transfer descriptor input parameter DescriptorPtr. This method can be used to 
                update DMA transfer byte count when DMA channel is enabled. New transfer byte count is stored in transfer 
                descriptor and written to associated DMA channel registers. The new transfer byte count can be optionally 
                checked for consistency with rest of the transfer descriptor data. If nested operation is used, the method sets 
                the minor (inner) loop byte count.

Module "DAC"       (component DAC_LDD)
   - DAC_Init -Initializes the device according to design-time configuration properties. Allocates memory for the device data 
                structure.   If the <Enable in init. code> is set to "yes" then the device is also enabled (see the description 
                of the Enable method).  This method can be called only once. Before the second call of Init the Deinit method 
                must be called first. If DMA service is enabled this method also initializes inherited DMA Transfer component.
   - DAC_Enable -Enables DAC device. If possible, this method switches on digital-to-analog converter device, voltage reference,
                etc.  This method is intended to be used together with Disable method to temporary switch On/Off the device 
                after the device is initialized.  This method is required if the <Enable in init. code> property is set to "no" 
                value.
   - DAC_Disable -Disables the DAC device. If possible, this method switches off digital-to-analog converter device, voltage 
                reference, etc. When the device is disabled, some component methods should not be called. If so, error 
                ERR_DISABLED is reported.  This method is intended to be used together with Enable method to temporary switch 
                On/Off the device after the device is initialized.  This method is not required. The Deinit method can be used 
                to switch off and uninstall the device.
   - DAC_SetBuffer -If the DMA is disabled, it writes an array of data words to the data buffer registers. Array is defined by 
                pointer to start address and by it's length. First written data buffer register is defined by index.  If the 
                length of array exceeds number of registers between the first written register and the last one at the end of 
                the buffer then an ERR_PARAM_RANGE is returned and no data are written. It is possible to write all register 
                available in hardware - no checking for current upper limit value of buffer is done.  DataArrayPtr has fixed 
                data type regardless of current hardware or design time configuration and must be always used. Real type of 
                user data is specified in <Data mode> property.  If the DMA service is enabled then this methods can be used to 
                prepare DMA transfer via channel handled by DMA Transfer inherited component.   _/Note: This method is 
                available only if DAC device is supporting data buffer and Data buffer is enabled./_
   - DAC_SetBufferMode -Selects buffer work mode.   _/Note: This method is available only if DAC device is supporting data 
                buffer and Data buffer is enabled./_
   - DAC_SetBufferReadPointer -Sets the data buffer read pointer value. If requested pointer value is greater than buffer size 
                defined by buffer upper limit value then ERR_PARAM_VALUE is returned.  _/Note: This method is available only if 
                DAC device is supporting data buffer and Data buffer is enabled./_
   - DAC_GetBufferReadPointer -Returns the data buffer read pointer value.  _/Note: This method is available only if DAC device 
                is supporting data buffer and Data buffer is enabled./_
   - DAC_SetOperationMode -This method requests to change the component's operation mode. Upon a request to change the 
                operation mode, the component will finish a pending job first and then notify a caller that an operation mode 
                has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and 
                notify a caller about this change.

Module "PDB"       (component Init_PDB_VAR0)
   - PDB_Init -This method initializes registers of the PDB module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "modulePIT0" (component Init_PIT_VAR0)
   - modulePIT0_Init -This method initializes registers of the PIT module according to the Peripheral Initialization settings. 
                Call this method in user code to initialize the module. By default, the method is called by PE automatically; 
                see "Call Init method" property of the component for more details.

Module "Cpu"       (component MK60FN1M0LQ15)

===================================================================================
